using Microsoft.AspNetCore.Identity;using Microsoft.EntityFrameworkCore;using System.Security.Claims;using LibrarySystem.Interfaces;using LibrarySystem.ViewModels;using LibrarySystem.Repositories;using LibrarySystem.Common;using LibrarySystem.Models;using LibrarySystem.Constant;namespace LibrarySystem.Services{    public class UserService : IUserService    {        private readonly IHttpContextAccessor _httpContextAccessor;        private readonly IUnitOfWorkRepository _unitOfWork;        private readonly UserManager<User> _userManager;        private readonly SignInManager<User> _signInManager;        private readonly RoleManager<ApplicationRole> _roleManager;        private readonly string _currentUserGuid;        private readonly string _currentUserName;        private readonly string _currentUserEmail;        public UserService(            IHttpContextAccessor httpContextAccessor,            IUnitOfWorkRepository unitOfWork,            UserManager<User> userManager,            SignInManager<User> signInManager,            RoleManager<ApplicationRole> roleManager)        {            _httpContextAccessor = httpContextAccessor;            _unitOfWork = unitOfWork;            _userManager = userManager;            _signInManager = signInManager;            _roleManager = roleManager;            _currentUserGuid = httpContextAccessor?.HttpContext?.User?.FindFirst(UserClaimsKey.Sub)?.Value;            _currentUserName = httpContextAccessor?.HttpContext?.User?.Identity?.Name;            _currentUserEmail = _currentUserGuid == null ? "" : userManager.FindByIdAsync(_currentUserGuid)?.Result?.Email;        }        public UserService()        {            _httpContextAccessor = new HttpContextAccessor();        }

        #region User        /// <summary>                             /// Get current user                             /// </summary>                             /// <returns></returns>public async Task<User> GetCurrentUserAsync()        {            return await _unitOfWork.Repository<User>().GetByUniqueIdAsync(_currentUserGuid);        }
        /// <summary>        /// Get all users        /// </summary>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           public async Task<IEnumerable<User>> GetAllUser()        {            return await _unitOfWork.Repository<User>().GetAll().AsQueryable().ToListAsync();        }
        /// <summary>        /// Get all user Ids        /// </summary>        /// <returns></returns>public async Task<IEnumerable<string>> GetAllUserIds()        {            return await _unitOfWork.Repository<User>().Query().Select(u => u.Id).ToListAsync();        }

        /// <summary>        /// Get current user GUID        /// </summary>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   public string GetCurrentUserGuid()        {            return _currentUserGuid;        }

        /// <summary>        /// Get current user name        /// </summary>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   public string GetCurrentUserName()        {            return _currentUserName;        }

        /// <summary>        /// Get current user email address        /// </summary>        /// <returns></returns>public string GetCurrentUserEmail()        {            return _currentUserEmail;        }
        #endregion
        #region User info, user account        /// <summary>                                                /// Get an user                                                /// </summary>                                                /// <param name="principal"></param>                                                /// <returns></returns>public async Task<User> GetUserAsync(ClaimsPrincipal principal)        {            return await _userManager.GetUserAsync(principal);        }

        /// <summary>        /// Get user details        /// </summary>        /// <param name="principal"></param>        /// <returns></returns>public async Task<UserViewModel> GetUserDetails(ClaimsPrincipal principal)        {            var userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);            var user = await _unitOfWork.Repository<User>()                             .Query()                             .Where(u => u.Id == userId)                             .ToListAsync();            return user.Select(u => new UserViewModel            {                Email = u.Email,                Username = u.LegalEntities.Count == 0 ? "" : u.LegalEntities.First().Name,                PhoneNumber = u.PhoneNumber,                AccountantId = u.AccountantId            }).First();        }
        /// <summary>        /// Get user API key        /// </summary>        /// <param name="principal"></param>        /// <returns></returns>public async Task<string> GetUserApiKeyAsync(ClaimsPrincipal principal)        {            var userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);            var user = await FindByIdAsync(userId);            return user.ApiKey;        }
        /// <summary>        /// Get user role        /// </summary>        /// <param name="principal"></param>        /// <returns></returns>public async Task<IList<string>> GetUserRolesAsync(ClaimsPrincipal principal)        {            var userId = principal.FindFirstValue(ClaimTypes.NameIdentifier);            var user = await FindByIdAsync(userId);            var roles = await _userManager.GetRolesAsync(user);            return roles;        }
        /// <summary>        /// Find an user by username        /// </summary>        /// <param name="username"></param>        /// <returns></returns>public async Task<User> FindByNameAsync(string username)        {            return await _userManager.FindByNameAsync(username);        }
        /// <summary>        /// Find an user by email address        /// </summary>        /// <param name="email"></param>        /// <returns></returns>public async Task<User> FindByEmailAsync(string email)        {            return await _userManager.FindByEmailAsync(email);        }
        /// <summary>        /// Find an user by Id        /// </summary>        /// <param name="id"></param>        /// <returns></returns>public async Task<User> FindByIdAsync(string id)        {            return await _userManager.FindByIdAsync(id);        }

        /// <summary>        /// Create an user with given password        /// </summary>        /// <param name="user"></param>        /// <param name="password"></param>        /// <returns></returns>public async Task<IdentityResult> CreateAsync(User user, string password)        {            return await _userManager.CreateAsync(user, password);        }

        /// <summary>        /// Set an user is locked        /// </summary>        /// <param name="user"></param>        /// <param name="enabled"></param>        /// <returns></returns>public async Task<IdentityResult> SetLockoutEnabledAsync(User user, bool enabled)        {            return await _userManager.SetLockoutEnabledAsync(user, enabled);        }

        /// <summary>        /// Reset password        /// </summary>        /// <param name="user"></param>        /// <param name="code"></param>        /// <param name="password"></param>        /// <returns></returns>public async Task<IdentityResult> ResetPasswordAsync(User user, string code, string password)        {            return await _userManager.ResetPasswordAsync(user, code, password);        }
        /// <summary>        /// Validates that an email confirmation token matches the specified user        /// </summary>        /// <param name="user"></param>        /// <param name="code"></param>        /// <returns></returns>public async Task<IdentityResult> ConfirmEmailAsync(User user, string code)        {            return await _userManager.ConfirmEmailAsync(user, code);        }

        /// <summary>        /// Sign in using username and password        /// </summary>        /// <param name="username"></param>        /// <param name="password"></param>        /// <param name="rememberMe"></param>        /// <param name="lockoutOnFailure"></param>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           public async Task<SignInResult> PasswordSignInAsync(string username, string password, bool rememberMe, bool lockoutOnFailure)        {            return await _signInManager.PasswordSignInAsync(username, password, rememberMe, lockoutOnFailure);        }
        /// <summary>        /// Create ClaimsPrincipal for an user        /// </summary>        /// <param name="user"></param>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            public async Task<ClaimsPrincipal> CreateUserPrincipalAsync(User user)        {            return await _signInManager.CreateUserPrincipalAsync(user);        }
        /// <summary>        /// Reset password request        /// </summary>        /// <param name="token"></param>        /// <param name="email"></param>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  public async Task SaveResetPasswordRequest(string token, string email)        {            var passwordRequest = new PasswordRequest            {                Token = token,                Email = email,                IsActive = true            };            await _unitOfWork.Repository<PasswordRequest>().AddAsync(passwordRequest);        }

        /// <summary>        /// Generate email confirmation token        /// </summary>        /// <param name="user"></param>        /// <returns></returns>public async Task<string> GenerateEmailConfirmationTokenAsync(User user)        {            return await _userManager.GenerateEmailConfirmationTokenAsync(user);        }

        /// <summary>        /// Generate password reset token        /// </summary>        /// <param name="user"></param>        /// <returns></returns>public async Task<string> GeneratePasswordResetTokenAsync(User user)        {            return await _userManager.GeneratePasswordResetTokenAsync(user);        }

        /// <summary>        ///  Retrieves the current number of failed accesses for the given user        /// </summary>        /// <param name="user"></param>        /// <returns></returns>public async Task<int> GetAccessFailedCountAsync(User user)        {            return await _userManager.GetAccessFailedCountAsync(user);        }


        /// <summary>        /// Toggle request passowrd status by email address        /// </summary>        /// <param name="email"></param>        /// <returns></returns>public async Task ToggleRequestPasswordStatusByEmail(string email)        {            var passwordRequests = await _unitOfWork.Repository<PasswordRequest>().Query()                .Where(rq => rq.Email.Equals(email, StringComparison.OrdinalIgnoreCase) && rq.IsActive)                .ToListAsync();            foreach (var passwordRequest in passwordRequests)            {                passwordRequest.IsActive = false;                await _unitOfWork.Repository<PasswordRequest>().UpdateAsync(passwordRequest);            }        }

        #endregion
        #region Roles        /// <summary>        /// Add the specified user to the named roles        /// </summary>       /// <param name="user"></param>       /// <param name="roles"></param>        /// <returns></returns>public async Task AddUserToRolesAsync(User user, List<string> roles)        {            await _userManager.AddToRolesAsync(user, roles);        }

        /// <summary>        /// Add user roles        /// </summary>        /// <param name="userRoles"></param>        /// <returns></returns>public async Task AddUserRoles(string[] userRoles)        {            foreach (var role in userRoles)            {                if (!await _roleManager.RoleExistsAsync(role))                {                    await _roleManager.CreateAsync(new ApplicationRole                    {                        Name = role,                        NormalizedName = role.ToUpper()                    });                }            }        }

        /// <summary>        /// Remove the specified user from the named roles        /// </summary>        /// <param name="user"></param>        /// <param name="roles"></param>        /// <returns></returns>public async Task RemoveFromRolesAsync(User user, string roles)        {            await _userManager.RemoveFromRoleAsync(user, roles);        }

        /// <summary>        /// Remove the specified user from the named roles        /// </summary>        /// <param name="user"></param>        /// <param name="roles"></param>        /// <returns></returns>public async Task RemoveFromRolesAsync(User user, string[] roles)        {            await _userManager.RemoveFromRolesAsync(user, roles);        }

        /// <summary>        /// Get current user roles        /// </summary>        /// <returns></returns>public IEnumerable<string> GetCurrentUserRoles()        {            var claims = _httpContextAccessor.HttpContext.User.Claims.ToList();            foreach (var claim in claims)            {                if (claim.Type == UserClaimsKey.Role)                    yield return claim.Value;            }        }

        /// <summary>        /// Get user roles        /// </summary>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                        public async Task<List<string>> GetUserRoles()        {            return await _roleManager.Roles.Select(x => x.Name).ToListAsync();        }

        /// <summary>        /// Get user roles by GUID        /// </summary>        /// <param name="userId"></param>        /// <returns></returns>public async Task<IList<string>> GetUserRolesByGuid(string userId)        {            var user = await _userManager.FindByIdAsync(userId);            return await _userManager.GetRolesAsync(user);        }

        /// <summary>        /// Get list of roles of a particular user        /// </summary>        /// <param name="role"></param>        /// <returns></returns>public async Task<List<User>> GetListRoleOfUser(string role)        {            var userList = await _userManager.GetUsersInRoleAsync(role);            return userList.ToList();        }

        #endregion
        #region Validate        /// <summary>                                 /// Check a specific user can sign in                                 /// </summary>                                 /// <param name="user"></param>                                 /// <returns></returns>public async Task<bool> CanSignInAsync(User user)        {            return await _signInManager.CanSignInAsync(user);        }

        /// <summary>        /// Check the email address for the specified user has been verified        /// </summary>        /// <param name="user"></param>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  public async Task<bool> IsEmailConfirmedAsync(User user)        {            return await _userManager.IsEmailConfirmedAsync(user);        }

        /// <summary>        /// Check a specific user is locked out        /// </summary>        /// <param name="user"></param>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 public async Task<bool> IsLockedOutAsync(User user)        {            return await _userManager.IsLockedOutAsync(user);        }

        /// <summary>        /// Check the reset password token is valid        /// </summary>        /// <param name="token"></param>        /// <param name="email"></param>        /// <returns></returns>public async Task<bool> CheckValidResetPasswordToken(string token, string email)        {            var passwordRequest = await _unitOfWork.Repository<PasswordRequest>().Query()                                        .Where(rq => rq.Email.Equals(email, StringComparison.OrdinalIgnoreCase)                                        && rq.Token.Equals(token, StringComparison.OrdinalIgnoreCase)                                        && rq.IsActive).SingleOrDefaultAsync();            return passwordRequest != null;        }

        /// <summary>        /// Attempts a password sign in for a user         /// </summary>        /// <param name="user"></param>        /// <param name="password"></param>        /// <param name="lockoutOnFailure"></param>        /// <returns></returns>public async Task<SignInResult> CheckPasswordSignInAsync(User user, string password, bool lockoutOnFailure)        {            return await _signInManager.CheckPasswordSignInAsync(user, password, lockoutOnFailure);        }
        /// <summary>        /// Signs in a specific user        /// </summary>        /// <param name="user"></param>        /// <param name="isPersistent"></param>        /// <returns></returns>public async Task SignInAsync(User user, bool isPersistent)        {            await _signInManager.SignInAsync(user, isPersistent);        }


        /// <summary>        /// Signs out a specific user        /// </summary>        /// <returns></returns>public async Task SignOutAsync()        {            await _signInManager.SignOutAsync();        }



        /// <summary>        /// Check the user is authenticated        /// </summary>        /// <returns></returns>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     public bool IsAuthenticated()        {            return _httpContextAccessor.HttpContext.User.Identity.IsAuthenticated;        }

        /// <summary>        /// Get user by API key        /// </summary>        /// <param name="key"></param>        /// <returns></returns>public async Task<User> GetUserByApiKey(string key)        {            return await _unitOfWork.Repository<User>()                              .Query()                              .Where(u => u.ApiKey == key)                              .FirstOrDefaultAsync();        }


        #endregion                                                                                                   }}